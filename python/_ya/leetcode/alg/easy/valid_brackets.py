
class Solution:
    def isValid(self, s: str) -> bool:
        brackets = {
            '(': ')',
            '[': ']',
            '{': '}'
        }
        
        stack = []
        for b in s:
            # Если это открывающая скобка, то добавим закрывающую в стек 
            # и затем проверим есть ли закрытая в троке
            if b in brackets.keys():
                stack.append(brackets[b])
            # если стек пустой (не было открывающей)
            # или последняя скобка из стека не равна текущей - строка не валидная 
            elif not stack or stack[-1] != b:
                return False
            # иначе это закрытая скобка и она равна закрывающей 
            # вытащим ее из стека
            else:
                stack.pop()

        return len(stack) == 0



if __name__ == "__main__":
    """
        Ссылка: https://leetcode.com/problems/valid-parentheses/
        Дано: Дана строка S содержащая след. символы: (, ), {, }, [, ],
        Необходимо: проверить валидная ли строка или нет. Валидной считается строка:
            1. Открытая скобка должна быть закрыта таким же типом скобок
            2. Открытая скобка должна быть закрыта в правильном порядке
            3. Каждая закрытая скобка должна быть открыта таким же типом
        Примечание:
        Решение:
        Сложность алгоритма:
    """
    solution = Solution()
    # brackets = "([)]"
    # brackets = "{}{}()[]"
    # brackets = "({{{{}}}))"
    # brackets = "(([]){})"
    brackets = "([])[}]"
    print(solution.isValid(brackets))
